// ------------------------------------------------------------------------------
//  <auto-generated>
//      此代码由编码的 UI 测试生成器生成。
//      版本: 11.0.0.0
//
//      如果重新生成代码，则更改此文件可能会导致错误的行为，
//      并将丢失这些更改。
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public partial class UIMap
    {
        //testing pull from droidedit
        // 測試中文字
        /// <summary>
        /// TestNoCondtional - 使用“TestNoCondtionalParams”将参数传递到此方法中。
        /// </summary>
        public void TestNoCondtional()
        {
            #region Variable Declarations
            WinButton uI篩選Button = this.UI幫你選股票Window.UI篩選Window.UI篩選Button;
            WinComboBox uIComboBox1ComboBox = this.UI幫你選股票Window.UIComboBox1Window.UIComboBox1ComboBox;
            #endregion

            // 单击 “篩選” 按钮
            Mouse.Click(uI篩選Button, new Point(23, 6));

            // 在 “comboBox1” 组合框 中选择“23”
            uIComboBox1ComboBox.SelectedItem = this.TestNoCondtionalParams.UIComboBox1ComboBoxSelectedItem;
        }
        
        /// <summary>
        /// AssertNoCondational - 使用“AssertNoCondationalExpectedValues”将参数传递到此方法中。
        /// </summary>
        public void AssertNoCondational()
        {
            #region Variable Declarations
            WinCell uIVelocityShares3xLongCell = this.UI幫你選股票Window.UIDataGridView1Window.UIDataGridViewTable.UI行0Row.UIVelocityShares3xLongCell;
            WinEdit uIItemEdit = this.UI幫你選股票Window.UIItemWindow.UIItemEdit;
            #endregion

            // 确认 “VelocityShares 3x Long Crude Oil ETN” 单元格 等于“VelocityShares 3x Long Crude Oil ETN”的“Value”属性
            Assert.AreEqual(this.AssertNoCondationalExpectedValues.UIVelocityShares3xLongCellValue, uIVelocityShares3xLongCell.Value);

            // 确认 文本框 等于“Edit”的“ControlType”属性
            Assert.AreEqual(this.AssertNoCondationalExpectedValues.UIItemEditControlType, uIItemEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// TestCondtionalByFMC - 使用“TestCondtionalByFMCParams”将参数传递到此方法中。
        /// </summary>
        public void TestCondtionalByFMC()
        {
            #region Variable Declarations
            WinCheckBox uI流動市值CheckBox = this.UI幫你選股票Window.UI流動市值Window.UI流動市值CheckBox;
            WinEdit uITextBox3Edit = this.UI幫你選股票Window.UITextBox3Window.UITextBox3Edit;
            WinEdit uITextBox4Edit = this.UI幫你選股票Window.UITextBox4Window.UITextBox4Edit;
            WinButton uI篩選Button = this.UI幫你選股票Window.UI篩選Window.UI篩選Button;
            #endregion

            // 选择 “流動市值” 复选框
            uI流動市值CheckBox.Checked = this.TestCondtionalByFMCParams.UI流動市值CheckBoxChecked;

            // 在 “textBox3” 文本框 中键入“0”
            uITextBox3Edit.Text = this.TestCondtionalByFMCParams.UITextBox3EditText;

            // 在 “textBox4” 文本框 中键入“100”
            uITextBox4Edit.Text = this.TestCondtionalByFMCParams.UITextBox4EditText;

            // 单击 “篩選” 按钮
            Mouse.Click(uI篩選Button, new Point(31, 12));
        }
        
        /// <summary>
        /// TestReSetButton - 使用“TestReSetButtonParams”将参数传递到此方法中。
        /// </summary>
        public void TestReSetButton()
        {
            #region Variable Declarations
            WinClient uI幫你選股票Client = this.UI幫你選股票Window.UI幫你選股票Client;
            WinCheckBox uI每股淨資產CheckBox = this.UI幫你選股票Window.UI每股淨資產Window.UI每股淨資產CheckBox;
            WinCheckBox uI股息率CheckBox = this.UI幫你選股票Window.UI股息率Window.UI股息率CheckBox;
            WinCheckBox uI净资产收益率CheckBox = this.UI幫你選股票Window.UI净资产收益率Window.UI净资产收益率CheckBox;
            WinCheckBox uI市净率倍CheckBox = this.UI幫你選股票Window.UI市净率倍Window.UI市净率倍CheckBox;
            WinEdit uITextBox11Edit = this.UI幫你選股票Window.UITextBox11Window.UITextBox11Edit;
            WinEdit uITextBox12Edit = this.UI幫你選股票Window.UITextBox12Window.UITextBox12Edit;
            WinEdit uITextBox18Edit = this.UI幫你選股票Window.UITextBox18Window.UITextBox18Edit;
            WinEdit uITextBox17Edit = this.UI幫你選股票Window.UITextBox17Window.UITextBox17Edit;
            WinEdit uITextBox21Edit = this.UI幫你選股票Window.UITextBox21Window.UITextBox21Edit;
            WinEdit uITextBox23Edit = this.UI幫你選股票Window.UITextBox23Window.UITextBox23Edit;
            WinEdit uITextBox24Edit = this.UI幫你選股票Window.UITextBox24Window.UITextBox24Edit;
            WinEdit uITextBox22Edit = this.UI幫你選股票Window.UITextBox22Window.UITextBox22Edit;
            WinButton uI篩選Button = this.UI幫你選股票Window.UI篩選Window.UI篩選Button;
            WinButton uI重置Button = this.UI幫你選股票Window.UI重置Window.UI重置Button;
            #endregion

            // 单击 “幫你選股票” 客户端
            Mouse.Click(uI幫你選股票Client, new Point(67, 255));

            // 选择 “每股淨資產” 复选框
            uI每股淨資產CheckBox.Checked = this.TestReSetButtonParams.UI每股淨資產CheckBoxChecked;

            // 选择 “股息率” 复选框
            uI股息率CheckBox.Checked = this.TestReSetButtonParams.UI股息率CheckBoxChecked;

            // 选择 “净资产收益率(%)” 复选框
            uI净资产收益率CheckBox.Checked = this.TestReSetButtonParams.UI净资产收益率CheckBoxChecked;

            // 单击 “幫你選股票” 客户端
            Mouse.Click(uI幫你選股票Client, new Point(67, 167));

            // 选择 “市净率(倍)” 复选框
            uI市净率倍CheckBox.Checked = this.TestReSetButtonParams.UI市净率倍CheckBoxChecked;

            // 在 “textBox11” 文本框 中键入“1”
            uITextBox11Edit.Text = this.TestReSetButtonParams.UITextBox11EditText;

            // 在 “textBox12” 文本框 中键入“2”
            uITextBox12Edit.Text = this.TestReSetButtonParams.UITextBox12EditText;

            // 在 “textBox18” 文本框 中键入“3”
            uITextBox18Edit.Text = this.TestReSetButtonParams.UITextBox18EditText;

            // 在 “textBox17” 文本框 中键入“1”
            uITextBox17Edit.Text = this.TestReSetButtonParams.UITextBox17EditText;

            // 在 “textBox21” 文本框 中键入“1”
            uITextBox21Edit.Text = this.TestReSetButtonParams.UITextBox21EditText;

            // 在 “textBox23” 文本框 中键入“1”
            uITextBox23Edit.Text = this.TestReSetButtonParams.UITextBox23EditText;

            // 在 “textBox24” 文本框 中键入“111”
            uITextBox24Edit.Text = this.TestReSetButtonParams.UITextBox24EditText;

            // 在 “textBox22” 文本框 中键入“111”
            uITextBox22Edit.Text = this.TestReSetButtonParams.UITextBox22EditText;

            // 单击 “篩選” 按钮
            Mouse.Click(uI篩選Button, new Point(26, 18));

            // 单击 “重置” 按钮
            Mouse.Click(uI重置Button, new Point(36, 0));
        }
        
        /// <summary>
        /// AssertReSetButton - 使用“AssertReSetButtonExpectedValues”将参数传递到此方法中。
        /// </summary>
        public void AssertReSetButton()
        {
            #region Variable Declarations
            WinCheckBox uI每股淨資產CheckBox = this.UI幫你選股票Window.UI每股淨資產Window.UI每股淨資產CheckBox;
            WinEdit uITextBox23Edit = this.UI幫你選股票Window.UITextBox23Window.UITextBox23Edit;
            WinEdit uITextBox24Edit = this.UI幫你選股票Window.UITextBox24Window.UITextBox24Edit;
            WinTable uIDataGridViewTable = this.UI幫你選股票Window.UIDataGridView1Window.UIDataGridViewTable;
            #endregion

            // 确认 “每股淨資產” 复选框 等于“CheckBox”的“ControlType”属性
            Assert.AreEqual(this.AssertReSetButtonExpectedValues.UI每股淨資產CheckBoxControlType, uI每股淨資產CheckBox.ControlType.ToString());

            // 确认 “textBox23” 文本框 等于“Edit”的“ControlType”属性
            Assert.AreEqual(this.AssertReSetButtonExpectedValues.UITextBox23EditControlType, uITextBox23Edit.ControlType.ToString());

            // 确认 “textBox24” 文本框 等于“Edit”的“ControlType”属性
            Assert.AreEqual(this.AssertReSetButtonExpectedValues.UITextBox24EditControlType, uITextBox24Edit.ControlType.ToString());

            // 确认 “DataGridView” 表 等于“Table”的“ControlType”属性
            Assert.AreEqual(this.AssertReSetButtonExpectedValues.UIDataGridViewTableControlType, uIDataGridViewTable.ControlType.ToString());
        }
        
        /// <summary>
        /// ReSetUI
        /// </summary>
        public void ReSetUI()
        {
            #region Variable Declarations
            WinButton uI重置Button = this.UI幫你選股票Window.UI重置Window.UI重置Button;
            #endregion

            // 单击 “重置” 按钮
            Mouse.Click(uI重置Button, new Point(72, 9));
        }
        
        /// <summary>
        /// AssertTestCondtionalByFMC - 使用“AssertTestCondtionalByFMCExpectedValues”将参数传递到此方法中。
        /// </summary>
        public void AssertTestCondtionalByFMC()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UI幫你選股票Window.UITextBox3Window.UITextBox3Edit;
            WinEdit uITextBox4Edit = this.UI幫你選股票Window.UITextBox4Window.UITextBox4Edit;
            WinCell uI正兴集团Cell = this.UI幫你選股票Window.UIDataGridView1Window.UIDataGridViewTable.UI行0Row4.UI正兴集团Cell;
            WinEdit uIItemEdit = this.UI幫你選股票Window.UIItemWindow.UIItemEdit;
            #endregion

            // 确认 “textBox3” 文本框 等于“0”的“Text”属性
            Assert.AreEqual(this.AssertTestCondtionalByFMCExpectedValues.UITextBox3EditText, uITextBox3Edit.Text, "非0");

            // 确认 “textBox4” 文本框 等于“100”的“Text”属性
            Assert.AreEqual(this.AssertTestCondtionalByFMCExpectedValues.UITextBox4EditText, uITextBox4Edit.Text, "非100");

            // 确认 “正兴集团” 单元格 等于“正兴集团”的“FriendlyName”属性
            Assert.AreEqual(this.AssertTestCondtionalByFMCExpectedValues.UI正兴集团CellFriendlyName, uI正兴集团Cell.FriendlyName, "非正興");

            // 确认 文本框 等于“1”的“Text”属性
            Assert.AreEqual(this.AssertTestCondtionalByFMCExpectedValues.UIItemEditText, uIItemEdit.Text, "頁碼不對");
        }
        
        /// <summary>
        /// AssertAssertNoCondational - 使用“AssertAssertNoCondationalExpectedValues”将参数传递到此方法中。
        /// </summary>
        public void AssertAssertNoCondational()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UI幫你選股票Window.UIItemWindow.UIItemEdit;
            WinCell uIVelocityShares3xLongCell = this.UI幫你選股票Window.UIDataGridView1Window.UIDataGridViewTable.UI行0Row5.UIVelocityShares3xLongCell;
            #endregion

            // 确认 文本框 等于“23”的“Text”属性
            Assert.AreEqual(this.AssertAssertNoCondationalExpectedValues.UIItemEditText, uIItemEdit.Text, "頁碼非23");

            // 确认 “VelocityShares 3x Long Crude Oil ETN” 单元格 等于“VelocityShares 3x Long Crude Oil ETN”的“FriendlyName”属性
            Assert.AreEqual(this.AssertAssertNoCondationalExpectedValues.UIVelocityShares3xLongCellFriendlyName, uIVelocityShares3xLongCell.FriendlyName, "股票名不對");
        }
        
        #region Properties
        public virtual TestNoCondtionalParams TestNoCondtionalParams
        {
            get
            {
                if ((this.mTestNoCondtionalParams == null))
                {
                    this.mTestNoCondtionalParams = new TestNoCondtionalParams();
                }
                return this.mTestNoCondtionalParams;
            }
        }
        
        public virtual AssertNoCondationalExpectedValues AssertNoCondationalExpectedValues
        {
            get
            {
                if ((this.mAssertNoCondationalExpectedValues == null))
                {
                    this.mAssertNoCondationalExpectedValues = new AssertNoCondationalExpectedValues();
                }
                return this.mAssertNoCondationalExpectedValues;
            }
        }
        
        public virtual TestCondtionalByFMCParams TestCondtionalByFMCParams
        {
            get
            {
                if ((this.mTestCondtionalByFMCParams == null))
                {
                    this.mTestCondtionalByFMCParams = new TestCondtionalByFMCParams();
                }
                return this.mTestCondtionalByFMCParams;
            }
        }
        
        public virtual TestReSetButtonParams TestReSetButtonParams
        {
            get
            {
                if ((this.mTestReSetButtonParams == null))
                {
                    this.mTestReSetButtonParams = new TestReSetButtonParams();
                }
                return this.mTestReSetButtonParams;
            }
        }
        
        public virtual AssertReSetButtonExpectedValues AssertReSetButtonExpectedValues
        {
            get
            {
                if ((this.mAssertReSetButtonExpectedValues == null))
                {
                    this.mAssertReSetButtonExpectedValues = new AssertReSetButtonExpectedValues();
                }
                return this.mAssertReSetButtonExpectedValues;
            }
        }
        
        public virtual AssertTestCondtionalByFMCExpectedValues AssertTestCondtionalByFMCExpectedValues
        {
            get
            {
                if ((this.mAssertTestCondtionalByFMCExpectedValues == null))
                {
                    this.mAssertTestCondtionalByFMCExpectedValues = new AssertTestCondtionalByFMCExpectedValues();
                }
                return this.mAssertTestCondtionalByFMCExpectedValues;
            }
        }
        
        public virtual AssertAssertNoCondationalExpectedValues AssertAssertNoCondationalExpectedValues
        {
            get
            {
                if ((this.mAssertAssertNoCondationalExpectedValues == null))
                {
                    this.mAssertAssertNoCondationalExpectedValues = new AssertAssertNoCondationalExpectedValues();
                }
                return this.mAssertAssertNoCondationalExpectedValues;
            }
        }
        
        public UI幫你選股票Window UI幫你選股票Window
        {
            get
            {
                if ((this.mUI幫你選股票Window == null))
                {
                    this.mUI幫你選股票Window = new UI幫你選股票Window();
                }
                return this.mUI幫你選股票Window;
            }
        }
        #endregion
        
        #region Fields
        private TestNoCondtionalParams mTestNoCondtionalParams;
        
        private AssertNoCondationalExpectedValues mAssertNoCondationalExpectedValues;
        
        private TestCondtionalByFMCParams mTestCondtionalByFMCParams;
        
        private TestReSetButtonParams mTestReSetButtonParams;
        
        private AssertReSetButtonExpectedValues mAssertReSetButtonExpectedValues;
        
        private AssertTestCondtionalByFMCExpectedValues mAssertTestCondtionalByFMCExpectedValues;
        
        private AssertAssertNoCondationalExpectedValues mAssertAssertNoCondationalExpectedValues;
        
        private UI幫你選股票Window mUI幫你選股票Window;
        #endregion
    }
    
    /// <summary>
    /// 要传递到“TestNoCondtional”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class TestNoCondtionalParams
    {
        
        #region Fields
        /// <summary>
        /// 在 “comboBox1” 组合框 中选择“23”
        /// </summary>
        public string UIComboBox1ComboBoxSelectedItem = "23";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“AssertNoCondational”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class AssertNoCondationalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 确认 “VelocityShares 3x Long Crude Oil ETN” 单元格 等于“VelocityShares 3x Long Crude Oil ETN”的“Value”属性
        /// </summary>
        public string UIVelocityShares3xLongCellValue = "VelocityShares 3x Long Crude Oil ETN";
        
        /// <summary>
        /// 确认 文本框 等于“Edit”的“ControlType”属性
        /// </summary>
        public string UIItemEditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“TestCondtionalByFMC”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class TestCondtionalByFMCParams
    {
        
        #region Fields
        /// <summary>
        /// 选择 “流動市值” 复选框
        /// </summary>
        public bool UI流動市值CheckBoxChecked = true;
        
        /// <summary>
        /// 在 “textBox3” 文本框 中键入“0”
        /// </summary>
        public string UITextBox3EditText = "0";
        
        /// <summary>
        /// 在 “textBox4” 文本框 中键入“100”
        /// </summary>
        public string UITextBox4EditText = "100";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“TestReSetButton”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class TestReSetButtonParams
    {
        
        #region Fields
        /// <summary>
        /// 选择 “每股淨資產” 复选框
        /// </summary>
        public bool UI每股淨資產CheckBoxChecked = true;
        
        /// <summary>
        /// 选择 “股息率” 复选框
        /// </summary>
        public bool UI股息率CheckBoxChecked = true;
        
        /// <summary>
        /// 选择 “净资产收益率(%)” 复选框
        /// </summary>
        public bool UI净资产收益率CheckBoxChecked = true;
        
        /// <summary>
        /// 选择 “市净率(倍)” 复选框
        /// </summary>
        public bool UI市净率倍CheckBoxChecked = true;
        
        /// <summary>
        /// 在 “textBox11” 文本框 中键入“1”
        /// </summary>
        public string UITextBox11EditText = "1";
        
        /// <summary>
        /// 在 “textBox12” 文本框 中键入“2”
        /// </summary>
        public string UITextBox12EditText = "2";
        
        /// <summary>
        /// 在 “textBox18” 文本框 中键入“3”
        /// </summary>
        public string UITextBox18EditText = "3";
        
        /// <summary>
        /// 在 “textBox17” 文本框 中键入“1”
        /// </summary>
        public string UITextBox17EditText = "1";
        
        /// <summary>
        /// 在 “textBox21” 文本框 中键入“1”
        /// </summary>
        public string UITextBox21EditText = "1";
        
        /// <summary>
        /// 在 “textBox23” 文本框 中键入“1”
        /// </summary>
        public string UITextBox23EditText = "1";
        
        /// <summary>
        /// 在 “textBox24” 文本框 中键入“111”
        /// </summary>
        public string UITextBox24EditText = "111";
        
        /// <summary>
        /// 在 “textBox22” 文本框 中键入“111”
        /// </summary>
        public string UITextBox22EditText = "111";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“AssertReSetButton”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class AssertReSetButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 确认 “每股淨資產” 复选框 等于“CheckBox”的“ControlType”属性
        /// </summary>
        public string UI每股淨資產CheckBoxControlType = "CheckBox";
        
        /// <summary>
        /// 确认 “textBox23” 文本框 等于“Edit”的“ControlType”属性
        /// </summary>
        public string UITextBox23EditControlType = "Edit";
        
        /// <summary>
        /// 确认 “textBox24” 文本框 等于“Edit”的“ControlType”属性
        /// </summary>
        public string UITextBox24EditControlType = "Edit";
        
        /// <summary>
        /// 确认 “DataGridView” 表 等于“Table”的“ControlType”属性
        /// </summary>
        public string UIDataGridViewTableControlType = "Table";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“AssertTestCondtionalByFMC”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class AssertTestCondtionalByFMCExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 确认 “textBox3” 文本框 等于“0”的“Text”属性
        /// </summary>
        public string UITextBox3EditText = "0";
        
        /// <summary>
        /// 确认 “textBox4” 文本框 等于“100”的“Text”属性
        /// </summary>
        public string UITextBox4EditText = "100";
        
        /// <summary>
        /// 确认 “正兴集团” 单元格 等于“正兴集团”的“FriendlyName”属性
        /// </summary>
        public string UI正兴集团CellFriendlyName = "正兴集团";
        
        /// <summary>
        /// 确认 文本框 等于“1”的“Text”属性
        /// </summary>
        public string UIItemEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“AssertAssertNoCondational”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class AssertAssertNoCondationalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 确认 文本框 等于“23”的“Text”属性
        /// </summary>
        public string UIItemEditText = "23";
        
        /// <summary>
        /// 确认 “VelocityShares 3x Long Crude Oil ETN” 单元格 等于“VelocityShares 3x Long Crude Oil ETN”的“FriendlyName”属性
        /// </summary>
        public string UIVelocityShares3xLongCellFriendlyName = "VelocityShares 3x Long Crude Oil ETN";
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI幫你選股票Window : WinWindow
    {
        
        public UI幫你選股票Window()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "幫你選股票";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public UI篩選Window UI篩選Window
        {
            get
            {
                if ((this.mUI篩選Window == null))
                {
                    this.mUI篩選Window = new UI篩選Window(this);
                }
                return this.mUI篩選Window;
            }
        }
        
        public UIComboBox1Window UIComboBox1Window
        {
            get
            {
                if ((this.mUIComboBox1Window == null))
                {
                    this.mUIComboBox1Window = new UIComboBox1Window(this);
                }
                return this.mUIComboBox1Window;
            }
        }
        
        public UIDataGridView1Window UIDataGridView1Window
        {
            get
            {
                if ((this.mUIDataGridView1Window == null))
                {
                    this.mUIDataGridView1Window = new UIDataGridView1Window(this);
                }
                return this.mUIDataGridView1Window;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UI流動市值Window UI流動市值Window
        {
            get
            {
                if ((this.mUI流動市值Window == null))
                {
                    this.mUI流動市值Window = new UI流動市值Window(this);
                }
                return this.mUI流動市值Window;
            }
        }
        
        public UITextBox3Window UITextBox3Window
        {
            get
            {
                if ((this.mUITextBox3Window == null))
                {
                    this.mUITextBox3Window = new UITextBox3Window(this);
                }
                return this.mUITextBox3Window;
            }
        }
        
        public UITextBox4Window UITextBox4Window
        {
            get
            {
                if ((this.mUITextBox4Window == null))
                {
                    this.mUITextBox4Window = new UITextBox4Window(this);
                }
                return this.mUITextBox4Window;
            }
        }
        
        public WinClient UI幫你選股票Client
        {
            get
            {
                if ((this.mUI幫你選股票Client == null))
                {
                    this.mUI幫你選股票Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI幫你選股票Client.SearchProperties[WinControl.PropertyNames.Name] = "幫你選股票";
                    this.mUI幫你選股票Client.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI幫你選股票Client;
            }
        }
        
        public UI每股淨資產Window UI每股淨資產Window
        {
            get
            {
                if ((this.mUI每股淨資產Window == null))
                {
                    this.mUI每股淨資產Window = new UI每股淨資產Window(this);
                }
                return this.mUI每股淨資產Window;
            }
        }
        
        public UI股息率Window UI股息率Window
        {
            get
            {
                if ((this.mUI股息率Window == null))
                {
                    this.mUI股息率Window = new UI股息率Window(this);
                }
                return this.mUI股息率Window;
            }
        }
        
        public UI净资产收益率Window UI净资产收益率Window
        {
            get
            {
                if ((this.mUI净资产收益率Window == null))
                {
                    this.mUI净资产收益率Window = new UI净资产收益率Window(this);
                }
                return this.mUI净资产收益率Window;
            }
        }
        
        public UI市净率倍Window UI市净率倍Window
        {
            get
            {
                if ((this.mUI市净率倍Window == null))
                {
                    this.mUI市净率倍Window = new UI市净率倍Window(this);
                }
                return this.mUI市净率倍Window;
            }
        }
        
        public UITextBox11Window UITextBox11Window
        {
            get
            {
                if ((this.mUITextBox11Window == null))
                {
                    this.mUITextBox11Window = new UITextBox11Window(this);
                }
                return this.mUITextBox11Window;
            }
        }
        
        public UITextBox12Window UITextBox12Window
        {
            get
            {
                if ((this.mUITextBox12Window == null))
                {
                    this.mUITextBox12Window = new UITextBox12Window(this);
                }
                return this.mUITextBox12Window;
            }
        }
        
        public UITextBox18Window UITextBox18Window
        {
            get
            {
                if ((this.mUITextBox18Window == null))
                {
                    this.mUITextBox18Window = new UITextBox18Window(this);
                }
                return this.mUITextBox18Window;
            }
        }
        
        public UITextBox17Window UITextBox17Window
        {
            get
            {
                if ((this.mUITextBox17Window == null))
                {
                    this.mUITextBox17Window = new UITextBox17Window(this);
                }
                return this.mUITextBox17Window;
            }
        }
        
        public UITextBox21Window UITextBox21Window
        {
            get
            {
                if ((this.mUITextBox21Window == null))
                {
                    this.mUITextBox21Window = new UITextBox21Window(this);
                }
                return this.mUITextBox21Window;
            }
        }
        
        public UITextBox23Window UITextBox23Window
        {
            get
            {
                if ((this.mUITextBox23Window == null))
                {
                    this.mUITextBox23Window = new UITextBox23Window(this);
                }
                return this.mUITextBox23Window;
            }
        }
        
        public UITextBox24Window UITextBox24Window
        {
            get
            {
                if ((this.mUITextBox24Window == null))
                {
                    this.mUITextBox24Window = new UITextBox24Window(this);
                }
                return this.mUITextBox24Window;
            }
        }
        
        public UITextBox22Window UITextBox22Window
        {
            get
            {
                if ((this.mUITextBox22Window == null))
                {
                    this.mUITextBox22Window = new UITextBox22Window(this);
                }
                return this.mUITextBox22Window;
            }
        }
        
        public UI重置Window UI重置Window
        {
            get
            {
                if ((this.mUI重置Window == null))
                {
                    this.mUI重置Window = new UI重置Window(this);
                }
                return this.mUI重置Window;
            }
        }
        #endregion
        
        #region Fields
        private UI篩選Window mUI篩選Window;
        
        private UIComboBox1Window mUIComboBox1Window;
        
        private UIDataGridView1Window mUIDataGridView1Window;
        
        private UIItemWindow mUIItemWindow;
        
        private UI流動市值Window mUI流動市值Window;
        
        private UITextBox3Window mUITextBox3Window;
        
        private UITextBox4Window mUITextBox4Window;
        
        private WinClient mUI幫你選股票Client;
        
        private UI每股淨資產Window mUI每股淨資產Window;
        
        private UI股息率Window mUI股息率Window;
        
        private UI净资产收益率Window mUI净资产收益率Window;
        
        private UI市净率倍Window mUI市净率倍Window;
        
        private UITextBox11Window mUITextBox11Window;
        
        private UITextBox12Window mUITextBox12Window;
        
        private UITextBox18Window mUITextBox18Window;
        
        private UITextBox17Window mUITextBox17Window;
        
        private UITextBox21Window mUITextBox21Window;
        
        private UITextBox23Window mUITextBox23Window;
        
        private UITextBox24Window mUITextBox24Window;
        
        private UITextBox22Window mUITextBox22Window;
        
        private UI重置Window mUI重置Window;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI篩選Window : WinWindow
    {
        
        public UI篩選Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "EditToChoose";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinButton UI篩選Button
        {
            get
            {
                if ((this.mUI篩選Button == null))
                {
                    this.mUI篩選Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI篩選Button.SearchProperties[WinButton.PropertyNames.Name] = "篩選";
                    this.mUI篩選Button.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI篩選Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI篩選Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UIComboBox1Window : WinWindow
    {
        
        public UIComboBox1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBox1";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIComboBox1ComboBox
        {
            get
            {
                if ((this.mUIComboBox1ComboBox == null))
                {
                    this.mUIComboBox1ComboBox = new WinComboBox(this);
                    #region 搜索条件
                    this.mUIComboBox1ComboBox.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUIComboBox1ComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIComboBox1ComboBox;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UIDataGridView1Window : WinWindow
    {
        
        public UIDataGridView1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dataGridView1";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public UI行0Row UI行0Row
        {
            get
            {
                if ((this.mUI行0Row == null))
                {
                    this.mUI行0Row = new UI行0Row(this);
                }
                return this.mUI行0Row;
            }
        }
        
        public UI行0Row1 UI行0Row1
        {
            get
            {
                if ((this.mUI行0Row1 == null))
                {
                    this.mUI行0Row1 = new UI行0Row1(this);
                }
                return this.mUI行0Row1;
            }
        }
        
        public UI行0Row2 UI行0Row2
        {
            get
            {
                if ((this.mUI行0Row2 == null))
                {
                    this.mUI行0Row2 = new UI行0Row2(this);
                }
                return this.mUI行0Row2;
            }
        }
        
        public UI行0Row3 UI行0Row3
        {
            get
            {
                if ((this.mUI行0Row3 == null))
                {
                    this.mUI行0Row3 = new UI行0Row3(this);
                }
                return this.mUI行0Row3;
            }
        }
        
        public UI行0Row4 UI行0Row4
        {
            get
            {
                if ((this.mUI行0Row4 == null))
                {
                    this.mUI行0Row4 = new UI行0Row4(this);
                }
                return this.mUI行0Row4;
            }
        }
        
        public UI行0Row5 UI行0Row5
        {
            get
            {
                if ((this.mUI行0Row5 == null))
                {
                    this.mUI行0Row5 = new UI行0Row5(this);
                }
                return this.mUI行0Row5;
            }
        }
        #endregion
        
        #region Fields
        private UI行0Row mUI行0Row;
        
        private UI行0Row1 mUI行0Row1;
        
        private UI行0Row2 mUI行0Row2;
        
        private UI行0Row3 mUI行0Row3;
        
        private UI行0Row4 mUI行0Row4;
        
        private UI行0Row5 mUI行0Row5;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI行0Row : WinRow
    {
        
        public UI行0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinRow.PropertyNames.Value] = "VelocityShares 3x Long Crude Oil ETN;3.2;3.674";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCell UIVelocityShares3xLongCell
        {
            get
            {
                if ((this.mUIVelocityShares3xLongCell == null))
                {
                    this.mUIVelocityShares3xLongCell = new WinCell(this);
                    #region 搜索条件
                    this.mUIVelocityShares3xLongCell.SearchProperties[WinCell.PropertyNames.Value] = "VelocityShares 3x Long Crude Oil ETN";
                    this.mUIVelocityShares3xLongCell.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUIVelocityShares3xLongCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIVelocityShares3xLongCell;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI行0Row1 : WinRow
    {
        
        public UI行0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinRow.PropertyNames.Value] = "正兴集团;1.53;1.33;0.093";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCell UI正兴集团Cell
        {
            get
            {
                if ((this.mUI正兴集团Cell == null))
                {
                    this.mUI正兴集团Cell = new WinCell(this);
                    #region 搜索条件
                    this.mUI正兴集团Cell.SearchProperties[WinCell.PropertyNames.Value] = "正兴集团";
                    this.mUI正兴集团Cell.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI正兴集团Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUI正兴集团Cell;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI行0Row2 : WinRow
    {
        
        public UI行0Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinRow.PropertyNames.Value] = "VelocityShares 3x Long Crude Oil ETN;3.65;3.69";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCell UIVelocityShares3xLongCell
        {
            get
            {
                if ((this.mUIVelocityShares3xLongCell == null))
                {
                    this.mUIVelocityShares3xLongCell = new WinCell(this);
                    #region 搜索条件
                    this.mUIVelocityShares3xLongCell.SearchProperties[WinCell.PropertyNames.Value] = "VelocityShares 3x Long Crude Oil ETN";
                    this.mUIVelocityShares3xLongCell.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUIVelocityShares3xLongCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIVelocityShares3xLongCell;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI行0Row3 : WinRow
    {
        
        public UI行0Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinRow.PropertyNames.Value] = "正兴集团;0.76;1.32;0.093";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCell UI正兴集团Cell
        {
            get
            {
                if ((this.mUI正兴集团Cell == null))
                {
                    this.mUI正兴集团Cell = new WinCell(this);
                    #region 搜索条件
                    this.mUI正兴集团Cell.SearchProperties[WinCell.PropertyNames.Value] = "正兴集团";
                    this.mUI正兴集团Cell.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI正兴集团Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUI正兴集团Cell;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI行0Row4 : WinRow
    {
        
        public UI行0Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinRow.PropertyNames.Value] = "正兴集团;-3.03;1.28;0.093";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCell UI正兴集团Cell
        {
            get
            {
                if ((this.mUI正兴集团Cell == null))
                {
                    this.mUI正兴集团Cell = new WinCell(this);
                    #region 搜索条件
                    this.mUI正兴集团Cell.SearchProperties[WinCell.PropertyNames.Value] = "正兴集团";
                    this.mUI正兴集团Cell.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI正兴集团Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUI正兴集团Cell;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI行0Row5 : WinRow
    {
        
        public UI行0Row5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinRow.PropertyNames.Value] = "VelocityShares 3x Long Crude Oil ETN;-5.1;3.5399";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCell UIVelocityShares3xLongCell
        {
            get
            {
                if ((this.mUIVelocityShares3xLongCell == null))
                {
                    this.mUIVelocityShares3xLongCell = new WinCell(this);
                    #region 搜索条件
                    this.mUIVelocityShares3xLongCell.SearchProperties[WinCell.PropertyNames.Value] = "VelocityShares 3x Long Crude Oil ETN";
                    this.mUIVelocityShares3xLongCell.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUIVelocityShares3xLongCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIVelocityShares3xLongCell;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region 搜索条件
                    this.mUIItemEdit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI流動市值Window : WinWindow
    {
        
        public UI流動市值Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CheckTotStockCost";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UI流動市值CheckBox
        {
            get
            {
                if ((this.mUI流動市值CheckBox == null))
                {
                    this.mUI流動市值CheckBox = new WinCheckBox(this);
                    #region 搜索条件
                    this.mUI流動市值CheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "流動市值";
                    this.mUI流動市值CheckBox.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI流動市值CheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUI流動市值CheckBox;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UITextBox3Window : WinWindow
    {
        
        public UITextBox3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox3";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox3Edit
        {
            get
            {
                if ((this.mUITextBox3Edit == null))
                {
                    this.mUITextBox3Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITextBox3Edit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUITextBox3Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox3Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UITextBox4Window : WinWindow
    {
        
        public UITextBox4Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox4";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox4Edit
        {
            get
            {
                if ((this.mUITextBox4Edit == null))
                {
                    this.mUITextBox4Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITextBox4Edit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUITextBox4Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox4Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI每股淨資產Window : WinWindow
    {
        
        public UI每股淨資產Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CheckBPS";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UI每股淨資產CheckBox
        {
            get
            {
                if ((this.mUI每股淨資產CheckBox == null))
                {
                    this.mUI每股淨資產CheckBox = new WinCheckBox(this);
                    #region 搜索条件
                    this.mUI每股淨資產CheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "每股淨資產";
                    this.mUI每股淨資產CheckBox.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI每股淨資產CheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUI每股淨資產CheckBox;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI股息率Window : WinWindow
    {
        
        public UI股息率Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CheckDY";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UI股息率CheckBox
        {
            get
            {
                if ((this.mUI股息率CheckBox == null))
                {
                    this.mUI股息率CheckBox = new WinCheckBox(this);
                    #region 搜索条件
                    this.mUI股息率CheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "股息率";
                    this.mUI股息率CheckBox.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI股息率CheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUI股息率CheckBox;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI净资产收益率Window : WinWindow
    {
        
        public UI净资产收益率Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CheckRoediluted";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UI净资产收益率CheckBox
        {
            get
            {
                if ((this.mUI净资产收益率CheckBox == null))
                {
                    this.mUI净资产收益率CheckBox = new WinCheckBox(this);
                    #region 搜索条件
                    this.mUI净资产收益率CheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "净资产收益率(%)";
                    this.mUI净资产收益率CheckBox.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI净资产收益率CheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUI净资产收益率CheckBox;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI市净率倍Window : WinWindow
    {
        
        public UI市净率倍Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CheckPB";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UI市净率倍CheckBox
        {
            get
            {
                if ((this.mUI市净率倍CheckBox == null))
                {
                    this.mUI市净率倍CheckBox = new WinCheckBox(this);
                    #region 搜索条件
                    this.mUI市净率倍CheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "市净率(倍)";
                    this.mUI市净率倍CheckBox.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI市净率倍CheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUI市净率倍CheckBox;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UITextBox11Window : WinWindow
    {
        
        public UITextBox11Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox11";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox11Edit
        {
            get
            {
                if ((this.mUITextBox11Edit == null))
                {
                    this.mUITextBox11Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITextBox11Edit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUITextBox11Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox11Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UITextBox12Window : WinWindow
    {
        
        public UITextBox12Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox12";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox12Edit
        {
            get
            {
                if ((this.mUITextBox12Edit == null))
                {
                    this.mUITextBox12Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITextBox12Edit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUITextBox12Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox12Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UITextBox18Window : WinWindow
    {
        
        public UITextBox18Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox18";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox18Edit
        {
            get
            {
                if ((this.mUITextBox18Edit == null))
                {
                    this.mUITextBox18Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITextBox18Edit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUITextBox18Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox18Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UITextBox17Window : WinWindow
    {
        
        public UITextBox17Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox17";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox17Edit
        {
            get
            {
                if ((this.mUITextBox17Edit == null))
                {
                    this.mUITextBox17Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITextBox17Edit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUITextBox17Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox17Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UITextBox21Window : WinWindow
    {
        
        public UITextBox21Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox21";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox21Edit
        {
            get
            {
                if ((this.mUITextBox21Edit == null))
                {
                    this.mUITextBox21Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITextBox21Edit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUITextBox21Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox21Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UITextBox23Window : WinWindow
    {
        
        public UITextBox23Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox23";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox23Edit
        {
            get
            {
                if ((this.mUITextBox23Edit == null))
                {
                    this.mUITextBox23Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITextBox23Edit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUITextBox23Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox23Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UITextBox24Window : WinWindow
    {
        
        public UITextBox24Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox24";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox24Edit
        {
            get
            {
                if ((this.mUITextBox24Edit == null))
                {
                    this.mUITextBox24Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITextBox24Edit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUITextBox24Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox24Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UITextBox22Window : WinWindow
    {
        
        public UITextBox22Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox22";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox22Edit
        {
            get
            {
                if ((this.mUITextBox22Edit == null))
                {
                    this.mUITextBox22Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITextBox22Edit.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUITextBox22Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox22Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "11.0.60315.1")]
    public class UI重置Window : WinWindow
    {
        
        public UI重置Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("幫你選股票");
            #endregion
        }
        
        #region Properties
        public WinButton UI重置Button
        {
            get
            {
                if ((this.mUI重置Button == null))
                {
                    this.mUI重置Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI重置Button.SearchProperties[WinButton.PropertyNames.Name] = "重置";
                    this.mUI重置Button.WindowTitles.Add("幫你選股票");
                    #endregion
                }
                return this.mUI重置Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI重置Button;
        #endregion
    }
}
